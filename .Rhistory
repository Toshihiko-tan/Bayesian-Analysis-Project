knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) # for data manipulation and visualization
library(readr) # for reading data
library(corrplot) # for correlation plots
library(scales) # for data scaling
library(stats) # for logistic regression
library(rstan) # for Bayesian models
library(caret) # for data splitting and pre-processing
df <- read_csv('heart_failure_clinical_records_dataset.csv')
install.packages("bit")
df <- read_csv('heart_failure_clinical_records_dataset.csv')
df$DEATH_EVENT %>% table()
df <- read_csv('heart_failure_clinical_records_dataset.csv')
df <- read_csv('heart_failure_clinical_records_dataset.csv',show_col_types = FALSE)
df$DEATH_EVENT %>% table()
na_counts <- sum(is.na(df))
na_counts
head(df)
smoke <- df %>% filter(smoking == 1)
no_smoke <- df %>% filter(smoking == 0)
male <- df %>% filter(sex == 1)
female <- df %>% filter(sex == 0)
head(female)
is_binary <- sapply(df, function(x) all(x %in% c(0, 1)))
bin_names <- names(df)[is_binary]
quant_names <- names(df)[!is_binary]
df_binary <- df[bin_names]
# Calculating and plotting the correlation matrix for binary variables
corr_matrix <- cor(df_binary)
corrplot(corr_matrix, method = "circle", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
df_quant <- df[quant_names]
# Calculating and plotting the correlation matrix for continuous variables
corr_matrix_cont <- cor(df_quant)
corrplot(corr_matrix_cont, method = "circle", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
set.seed(42)
y <- df$DEATH_EVENT
X <- df %>% select(-DEATH_EVENT, -time) %>% as.data.frame()
index <- createDataPartition(y, p = .7, list = FALSE)
train <- df[index, ]
test <- df[-index, ]
trainX <- train %>% select(-DEATH_EVENT) %>% data.matrix()
testX <- test %>% select(-DEATH_EVENT) %>% data.matrix()
trainY <- train$DEATH_EVENT
testY <- test$DEATH_EVENT
trainX_scaled <- scale(trainX)
testX_scaled <- scale(testX, center = attr(trainX_scaled, "scaled:center"), scale = attr(trainX_scaled, "scaled:scale"))
model <- glm(trainY ~ trainX_scaled, family = binomial(link = "logit"))
summary(model)
# Predict probabilities on the test set
predicted_probabilities <- predict(model, newdata = as.data.frame(testX_scaled), type = "response")
predicted_outcomes <- ifelse(predicted_probabilities > 0.5, 1, 0)
# Calculate accuracy
accuracy <- mean(predicted_outcomes == testY)
print(paste("Accuracy:", accuracy))
# Define Stan model
stan_model_code <- "
data {
int<lower=0> N;
int<lower=0,upper=1> y[N];
vector[N] x;
}
parameters {
real alpha;
real beta;
}
model {
alpha ~ normal(0, 10);
beta ~ normal(0, 10);
for (i in 1:N)
y[i] ~ bernoulli_logit(alpha + beta * x[i]);
}
"
data_for_stan <- list(
N = length(y),
y = as.integer(y),
x = as.numeric(df$age)
)
# Compile and fit the model
fit <- stan(model_code = stan_model_code, data = data_for_stan, iter = 3000, chains = 4, warmup = 1000, seed = 101)
print(fit)
# install.packages("rstan", dependencies = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(rstan)
library(ggplot2)
y <- c(0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,
2,1,5,2,5,3,2,7,7,3,3,2,9,10,4,4,4,4,4,4,4,10,4,4,4,5,
11,12, 5,5,6,5,6,6,6,6,16,15,15,9,4)
n <- c(20,20,20,20,20,19,19,19,19,18,17,20,20,20,20,19,19,18,18,25,24,
23,20,20,20,20,20,20,10,49,19,46,27,17,49,47,20,20,13,48,50,20,
20,20,20,20,20,20,48,19,19,19,22,46,49,20,20,23,19,22,20,20,20,
52,46,47,24,14)
stan_model_code <- "
data {
int<lower=0> J; // Number of historical experiments plus current one
int<lower=0> y[J]; // Tumors observed
int<lower=0> n[J]; // Total number of rats in each experiment
}
parameters {
real<lower=0> alpha;
real<lower=0> beta;
vector<lower=0,upper=1>[J] theta; // Probabilities of tumor for each experiment
}
model {
alpha ~ normal(0, 10); // Prior for alpha
beta ~ normal(0, 10); // Prior for beta
theta ~ beta(alpha, beta); // Prior for theta
for (j in 1:J) {
y[j] ~ binomial(n[j], theta[j]); // Observations model
}
}
"
stan_model <- stan_model(model_code = stan_model_code)
J <- length(y)
fit <- sampling(stan_model, data = list(J = J, y = y, n = n), iter = 2000, chains = 4)
samples <- extract(fit)
E_alpha <- mean(samples$alpha)
Prob_alpha <- mean(samples$alpha / (samples$alpha + samples$beta) < 0.2)
print(paste("Expected value of alpha (E[alpha]) is", E_alpha))
print(paste("Probability of alpha / (alpha + beta) < 0.2 is", Prob_alpha))
theta_68_samples <- samples$theta[,68]
ggplot(data.frame(theta_68 = theta_68_samples), aes(x = theta_68)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Posterior Distribution of θ_68", x = "θ_68", y = "Density")
# install.packages("rstan", dependencies = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(rstan)
library(ggplot2)
y <- c(0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,
2,1,5,2,5,3,2,7,7,3,3,2,9,10,4,4,4,4,4,4,4,10,4,4,4,5,
11,12, 5,5,6,5,6,6,6,6,16,15,15,9,4)
n <- c(20,20,20,20,20,19,19,19,19,18,17,20,20,20,20,19,19,18,18,25,24,
23,20,20,20,20,20,20,10,49,19,46,27,17,49,47,20,20,13,48,50,20,
20,20,20,20,20,20,48,19,19,19,22,46,49,20,20,23,19,22,20,20,20,
52,46,47,24,14)
E_alpha <- mean(samples$alpha)
Prob_alpha <- mean(samples$alpha / (samples$alpha + samples$beta) < 0.2)
print(paste("Expected value of alpha (E[alpha]) is", E_alpha))
print(paste("Probability of alpha / (alpha + beta) < 0.2 is", Prob_alpha))
stan_model_code <- "
data {
int<lower=0> J; // Number of historical experiments plus current one
int<lower=0> y[J]; // Tumors observed
int<lower=0> n[J]; // Total number of rats in each experiment
}
parameters {
real<lower=0> alpha;
real<lower=0> beta;
vector<lower=0,upper=1>[J] theta; // Probabilities of tumor for each experiment
}
model {
alpha ~ normal(0, 10); // Prior for alpha
beta ~ normal(0, 10); // Prior for beta
theta ~ beta(alpha, beta); // Prior for theta
for (j in 1:J) {
y[j] ~ binomial(n[j], theta[j]); // Observations model
}
}
"
stan_model <- stan_model(model_code = stan_model_code)
J <- length(y)
fit <- sampling(stan_model, data = list(J = J, y = y, n = n), iter = 2000, chains = 4)
samples <- extract(fit)
E_alpha <- mean(samples$alpha)
Prob_alpha <- mean(samples$alpha / (samples$alpha + samples$beta) < 0.2)
print(paste("Expected value of alpha (E[alpha]) is", E_alpha))
print(paste("Probability of alpha / (alpha + beta) < 0.2 is", Prob_alpha))
theta_68_samples <- samples$theta[,68]
ggplot(data.frame(theta_68 = theta_68_samples), aes(x = theta_68)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Posterior Distribution of θ_68", x = "θ_68", y = "Density")
theta_68_samples <- samples$theta[,68]
ggplot(data.frame(theta_68 = theta_68_samples), aes(x = theta_68)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Posterior Distribution of theta_68", x = "theta_68", y = "Density")
stan_model_code <- "
data {
int<lower=0> J; // Number of historical experiments plus current one
int<lower=0> y[J]; // Tumors observed
int<lower=0> n[J]; // Total number of rats in each experiment
}
parameters {
real<lower=0> alpha;
real<lower=0> beta;
vector<lower=0,upper=1>[J] theta; // Probabilities of tumor for each experiment
}
model {
alpha ~ normal(0, 10); // Prior for alpha
beta ~ normal(0, 10); // Prior for beta
theta ~ beta(alpha, beta); // Prior for theta
for (j in 1:J) {
y[j] ~ binomial(n[j], theta[j]); // Observations model
}
}
"
stan_model <- stan_model(model_code = stan_model_code)
J <- length(y)
fit <- sampling(stan_model, data = list(J = J, y = y, n = n), iter = 2000, chains = 4)
samples <- extract(fit)
E_alpha <- mean(samples$alpha)
Prob_alpha <- mean(samples$alpha / (samples$alpha + samples$beta) < 0.2)
print(paste("Expected value of alpha (E[alpha]) is", E_alpha))
print(paste("Probability of alpha / (alpha + beta) < 0.2 is", Prob_alpha))
theta_68_samples <- samples$theta[,68]
ggplot(data.frame(theta_68 = theta_68_samples), aes(x = theta_68)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Posterior Distribution of theta_68", x = "theta_68", y = "Density")
